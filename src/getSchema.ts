import { GraphQLSchema, buildSchema } from 'graphql'
import { loadSchemaSync } from '@graphql-tools/load'
import { UrlLoader } from '@graphql-tools/url-loader'
import { JsonFileLoader } from '@graphql-tools/json-file-loader'
import { GraphQLFileLoader } from '@graphql-tools/graphql-file-loader'

// TODO: make this work
export const loadSchema = (schema: string): GraphQLSchema => {
  return buildSchema(`
  ### This file was generated by Nexus Schema
### Do not make changes to this file directly

"""
Move a Pokémon can perform with the associated damage and type.
"""
type Attack {
  damage: Int
  name: String
  type: PokemonType
}

type AttacksConnection {
  fast: [Attack]
  special: [Attack]
}

"""
Requirement that prevents an evolution through regular means of levelling up.
"""
type EvolutionRequirement {
  amount: Int
  name: String
}

type Pokemon {
  attacks: AttacksConnection
  classification: String
  evolutionRequirements: [EvolutionRequirement]
  evolutions: [Pokemon]

  """
  Likelihood of an attempt to catch a Pokémon to fail.
  """
  fleeRate: Float
  height: PokemonDimension
  id: ID!

  """
  Maximum combat power a Pokémon may achieve at max level.
  """
  maxCP: Int

  """
  Maximum health points a Pokémon may achieve at max level.
  """
  maxHP: Int
  name: String!
  resistant: [PokemonType]
  types: [PokemonType]
  weaknesses: [PokemonType]
  weight: PokemonDimension
}

type PokemonDimension {
  maximum: String
  minimum: String
}

"""
Elemental property associated with either a Pokémon or one of their moves.
"""
enum PokemonType {
  Bug
  Dark
  Dragon
  Electric
  Fairy
  Fighting
  Fire
  Flying
  Ghost
  Grass
  Ground
  Ice
  Normal
  Poison
  Psychic
  Rock
  Steel
  Water
}

type Query {
  """
  Get a single Pokémon by its ID, a three character long identifier padded with zeroes
  """
  pokemon(id: ID!): Pokemon

  """
  List out all Pokémon, optionally in pages
  """
  pokemons(limit: Int, skip: Int): [Pokemon]
}
  `)
  return loadSchemaSync(schema, {
    loaders: [
      new JsonFileLoader(),
      new GraphQLFileLoader(),
      new UrlLoader()
    ]
  })
}
